1#include <stdio.h>
#include <stdlib.h>

// Structure to represent an item
struct Item {
    int weight;
    int value;
};

// Compare function for sorting items by value per unit weight in non-increasing order
int compare(const void* a, const void* b) {
    double ratio_a = (double)((struct Item*)a)->value / ((struct Item*)a)->weight;
    double ratio_b = (double)((struct Item*)b)->value / ((struct Item*)b)->weight;
    if (ratio_a < ratio_b) return 1;
    if (ratio_a > ratio_b) return -1;
    return 0;
}

// Function to solve the Fractional Knapsack problem
double fractionalKnapsack(struct Item items[], int n, int capacity) {
    // Sort items by value per unit weight in non-increasing order
    qsort(items, n, sizeof(struct Item), compare);

    double totalValue = 0.0; // Total value in the knapsack
    int currentWeight = 0;  // Current weight in the knapsack

    // Iterate through sorted items
    for (int i = 0; i < n; i++) {
        // If adding the entire item doesn't exceed the capacity, add it
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            // Add a fraction of the item to fill the capacity
            int remainingCapacity = capacity - currentWeight;
            totalValue += (double)remainingCapacity * items[i].value / items[i].weight;
            break;
        }
    }

    return totalValue;
}

int main() {
    int n, capacity;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the knapsack capacity: ");
    scanf("%d", &capacity);

    struct Item items[n];

    printf("Enter the weight and value of each item:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &items[i].weight, &items[i].value);
    }

    double maxValue = fractionalKnapsack(items, n, capacity);
    printf("The maximum value that can be obtained is: %.2lf\n", maxValue);

    return 0;
}
